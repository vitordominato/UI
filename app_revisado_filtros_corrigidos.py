
import streamlit as st
import pandas as pd
from datetime import datetime

st.set_page_config(page_title="Gest√£o de Interna√ß√µes", layout="wide")

colunas = [
    "Data de Atualiza√ß√£o", "Risco Assistencial", "N√∫mero do Atendimento", "Nome do Paciente",
    "N√∫mero do Leito", "Unidade", "Andar", "Equipe", "Nome do M√©dico Respons√°vel",
    "Cuidado Paliativo", "Pend√™ncia do Turno", "Aguarda Desospitaliza√ß√£o", "Aguarda Cirurgia",
    "Operadora de Sa√∫de", "Origem do Paciente", "Intercorr√™ncia", "Descri√ß√£o da Intercorr√™ncia",
    "Data/Hora da Intercorr√™ncia", "Alta Prevista para Amanh√£", "Foi Alta", "Observa√ß√µes"
]

def carregar_planilha(caminho, colunas_ref):
    try:
        df = pd.read_excel(caminho)
        for col in colunas_ref:
            if col not in df.columns:
                df[col] = ""
        return df
    except:
        return pd.DataFrame(columns=colunas_ref)

def salvar_planilha(df, caminho):
    df.to_excel(caminho, index=False)

df_pacientes = carregar_planilha("Planilha_Mestre_Internacoes_Atualizada.xlsx", colunas)
df_medicos = carregar_planilha("Cadastro_Medicos.xlsx", ["Nome do M√©dico Respons√°vel"])
df_altas = carregar_planilha("Pacientes_Altas_Atualizada.xlsx", colunas)
df_obitos = carregar_planilha("Pacientes_Obitos_Atualizada.xlsx", colunas)

st.sidebar.title("Menu")
pagina = st.sidebar.radio("Navega√ß√£o", ["Painel de Interna√ß√µes", "Cadastro de Paciente", "Cadastro de M√©dico"])
st.sidebar.button("üîÑ Atualizar Lista", on_click=st.rerun)

# ========== P√ÅGINA: PAINEL ==========
if pagina == "Painel de Interna√ß√µes":
    st.title("Painel de Interna√ß√µes")
    if df_pacientes.empty:
        st.info("Nenhum paciente registrado.")
    else:
        # Painel com filtros
        with st.sidebar.expander("Filtros"):
            def normalizar_sim_nao(serie):
                return serie.fillna("").astype(str).str.strip().str.lower().map({"sim": "Sim", "n√£o": "N√£o", "nao": "N√£o"})

            df_pacientes["Cuidado Paliativo"] = normalizar_sim_nao(df_pacientes["Cuidado Paliativo"])
            df_pacientes["Aguarda Cirurgia"] = normalizar_sim_nao(df_pacientes["Aguarda Cirurgia"])
            df_pacientes["Aguarda Desospitaliza√ß√£o"] = normalizar_sim_nao(df_pacientes["Aguarda Desospitaliza√ß√£o"])
            df_pacientes["Alta Prevista para Amanh√£"] = normalizar_sim_nao(df_pacientes["Alta Prevista para Amanh√£"])

            def safe_select(label, coluna, opcoes_fixas=None):
                if coluna in df_pacientes.columns and not df_pacientes[coluna].dropna().empty:
                    opcoes = sorted(df_pacientes[coluna].dropna().astype(str).str.strip().str.capitalize().unique().tolist())
                    if opcoes_fixas:
                        opcoes = [op for op in opcoes if op in opcoes_fixas]
                    return st.selectbox(label, ["Todos"] + opcoes)
                elif opcoes_fixas:
                    return st.selectbox(label, ["Todos"] + opcoes_fixas)
                else:
                    return st.selectbox(label, ["Todos"])

            medico = safe_select("M√©dico", "Nome do M√©dico Respons√°vel")
            unidade = safe_select("Unidade", "Unidade", ["Unidade I", "Unidade III", "Unidade IV"])
            andar = safe_select("Andar", "Andar")
            risco = safe_select("Risco Assistencial", "Risco Assistencial", ["Baixo", "Moderado", "Alto"])
            paliativo = safe_select("Cuidado Paliativo", "Cuidado Paliativo", ["Sim", "N√£o"])
            alta_amanha = safe_select("Alta Prevista para Amanh√£", "Alta Prevista para Amanh√£", ["Sim", "N√£o"])
            equipe = safe_select("Equipe", "Equipe")
            operadora = safe_select("Operadora de Sa√∫de", "Operadora de Sa√∫de")
            cirurgia = safe_select("Aguarda Cirurgia", "Aguarda Cirurgia", ["Sim", "N√£o"])
            desosp = safe_select("Aguarda Desospitaliza√ß√£o", "Aguarda Desospitaliza√ß√£o", ["Sim", "N√£o"])

            if st.button("üßπ Limpar Filtros"):
                st.rerun()

# Continua√ß√£o ser√° feita na pr√≥xima c√©lula para manter organiza√ß√£o

        filtro = df_pacientes.copy()
        if medico != "Todos":
            filtro = filtro[filtro["Nome do M√©dico Respons√°vel"] == medico]
        if unidade != "Todos":
            filtro = filtro[filtro["Unidade"] == unidade]
        if andar != "Todos":
            filtro = filtro[filtro["Andar"].astype(str) == andar]
        if risco != "Todos":
            filtro = filtro[filtro["Risco Assistencial"] == risco]
        if paliativo != "Todos":
            filtro = filtro[filtro["Cuidado Paliativo"] == paliativo]
        if alta_amanha != "Todos":
            filtro = filtro[filtro["Alta Prevista para Amanh√£"] == alta_amanha]
        if equipe != "Todos":
            filtro = filtro[filtro["Equipe"] == equipe]
        if operadora != "Todos":
            filtro = filtro[filtro["Operadora de Sa√∫de"] == operadora]
        if cirurgia != "Todos":
            filtro = filtro[filtro["Aguarda Cirurgia"] == cirurgia]
        if desosp != "Todos":
            filtro = filtro[filtro["Aguarda Desospitaliza√ß√£o"] == desosp]
        filtro = filtro[filtro["Foi Alta"] != "Sim"]

        for i, row in filtro.iterrows():
            if st.button(f"{row['Nome do Paciente']} - Leito {row['N√∫mero do Leito']} - Dr. {row['Nome do M√©dico Respons√°vel']}", key=f"edit_{i}"):
                st.session_state["editar"] = row["N√∫mero do Atendimento"]

        if "editar" in st.session_state:
            atendimento = st.session_state["editar"]
            linha = df_pacientes[df_pacientes["N√∫mero do Atendimento"] == atendimento]
            if not linha.empty:
                i = linha.index[0]
                st.subheader("Editar Paciente")
                with st.form("editar_paciente"):
                    st.text_input("Data de Atualiza√ß√£o", value=str(datetime.now().date()), disabled=True)
                    df_pacientes.at[i, "Pend√™ncia do Turno"] = st.text_area("Pend√™ncia do Turno", value=df_pacientes.at[i, "Pend√™ncia do Turno"])
                    opcoes_interc = ["", "C√≥digo Azul", "C√≥digo Amarelo", "C√≥digo Laranja", "C√≥digo Verde", "Outro"]
                    val_interc = df_pacientes.at[i, "Intercorr√™ncia"]
                    idx_interc = opcoes_interc.index(val_interc) if val_interc in opcoes_interc else 0
                    df_pacientes.at[i, "Intercorr√™ncia"] = st.selectbox("Intercorr√™ncia", opcoes_interc, index=idx_interc)
                    df_pacientes.at[i, "Descri√ß√£o da Intercorr√™ncia"] = st.text_input("Descri√ß√£o da Intercorr√™ncia", value=df_pacientes.at[i, "Descri√ß√£o da Intercorr√™ncia"])
                    df_pacientes.at[i, "Observa√ß√µes"] = st.text_area("Observa√ß√µes", value=df_pacientes.at[i, "Observa√ß√µes"])
                    salvar = st.form_submit_button("Salvar")
                    if salvar:
                        df_pacientes.at[i, "Data de Atualiza√ß√£o"] = datetime.now().date()
                        if df_pacientes.at[i, "Intercorr√™ncia"] and not df_pacientes.at[i, "Data/Hora da Intercorr√™ncia"]:
                            df_pacientes.at[i, "Data/Hora da Intercorr√™ncia"] = datetime.now().strftime("%d/%m/%Y %H:%M")
                        salvar_planilha(df_pacientes, "Planilha_Mestre_Internacoes_Atualizada.xlsx")
                        st.success("Paciente atualizado.")
                        st.rerun()

                if st.button("Transferir para CTI"):
                    df_pacientes.at[i, "Origem do Paciente"] = "CTI"
                    salvar_planilha(df_pacientes, "Planilha_Mestre_Internacoes_Atualizada.xlsx")
                    st.success("Paciente transferido.")
                    st.rerun()

                if st.button("Dar Alta"):
                    df_pacientes.at[i, "Foi Alta"] = "Sim"
                    df_altas = pd.concat([df_altas, pd.DataFrame([df_pacientes.loc[i]])], ignore_index=True)
                    df_pacientes.drop(i, inplace=True)
                    salvar_planilha(df_altas, "Pacientes_Altas_Atualizada.xlsx")
                    salvar_planilha(df_pacientes, "Planilha_Mestre_Internacoes_Atualizada.xlsx")
                    st.success("Alta registrada.")
                    st.rerun()

                if st.button("Registrar √ìbito"):
                    df_obitos = pd.concat([df_obitos, pd.DataFrame([df_pacientes.loc[i]])], ignore_index=True)
                    df_pacientes.drop(i, inplace=True)
                    salvar_planilha(df_obitos, "Pacientes_Obitos_Atualizada.xlsx")
                    salvar_planilha(df_pacientes, "Planilha_Mestre_Internacoes_Atualizada.xlsx")
                    st.success("√ìbito registrado.")
                    st.rerun()

# ========== P√ÅGINA: CADASTRO DE PACIENTE ==========
elif pagina == "Cadastro de Paciente":
    st.title("Cadastro de Novo Paciente")
    with st.form("form_paciente"):
        atendimento = st.text_input("N√∫mero do Atendimento *")
        nome = st.text_input("Nome do Paciente *")
        leito = st.text_input("N√∫mero do Leito *")
        unidade = st.selectbox("Unidade *", ["Unidade I", "Unidade III", "Unidade IV"])
        andar = st.selectbox("Andar *", [str(i) for i in range(4, 10)])
        equipe = st.selectbox("Equipe *", ["hematologia", "oncologia", "tmo", "hepatologia", "cardiologia", "cl√≠nica m√©dica", "GO", "pediatria", "MA"])
        medico = st.selectbox("Nome do M√©dico Respons√°vel *", sorted(df_medicos["Nome do M√©dico Respons√°vel"].dropna().unique().tolist()))
        risco = st.selectbox("Risco Assistencial *", ["Baixo", "Moderado", "Alto"])
        paliativo = st.selectbox("Cuidado Paliativo *", ["Sim", "N√£o"])
        alta_amanha = st.selectbox("Alta Prevista para Amanh√£", ["Sim", "N√£o"])
        cirurgia = st.selectbox("Aguarda Cirurgia", ["Sim", "N√£o"])
        desosp = st.selectbox("Aguarda Desospitaliza√ß√£o", ["Sim", "N√£o"])
        operadora = st.text_input("Operadora de Sa√∫de")
        origem = st.selectbox("Origem do Paciente", ["Emerg√™ncia", "CTI", "Eletiva"])
        salvar = st.form_submit_button("Salvar")
        if salvar:
            nova = {
                "Data de Atualiza√ß√£o": datetime.now().date(),
                "Risco Assistencial": risco,
                "N√∫mero do Atendimento": atendimento,
                "Nome do Paciente": nome,
                "N√∫mero do Leito": leito,
                "Unidade": unidade,
                "Andar": andar,
                "Equipe": equipe,
                "Nome do M√©dico Respons√°vel": medico,
                "Cuidado Paliativo": paliativo,
                "Alta Prevista para Amanh√£": alta_amanha,
                "Aguarda Cirurgia": cirurgia,
                "Aguarda Desospitaliza√ß√£o": desosp,
                "Operadora de Sa√∫de": operadora,
                "Origem do Paciente": origem
            }
            for col in colunas:
                if col not in nova:
                    nova[col] = ""
            df_pacientes = pd.concat([df_pacientes, pd.DataFrame([nova])], ignore_index=True)
            salvar_planilha(df_pacientes, "Planilha_Mestre_Internacoes_Atualizada.xlsx")
            st.success("Paciente cadastrado com sucesso.")
            st.rerun()

# ========== P√ÅGINA: CADASTRO DE M√âDICO ==========
elif pagina == "Cadastro de M√©dico":
    st.title("Cadastro de M√©dico")
    with st.form("form_medico"):
        novo_medico = st.text_input("Nome do M√©dico *")
        salvar = st.form_submit_button("Salvar")
        if salvar and novo_medico:
            df_medicos = pd.concat([df_medicos, pd.DataFrame([{"Nome do M√©dico Respons√°vel": novo_medico}])], ignore_index=True)
            salvar_planilha(df_medicos, "Cadastro_Medicos.xlsx")
            st.success("M√©dico cadastrado com sucesso.")
            st.rerun()
