import streamlit as st
import pandas as pd
from datetime import datetime, timedelta

st.set_page_config(page_title="Gest√£o de Interna√ß√µes", layout="wide")

# Fun√ß√µes auxiliares
def carregar_dados_pacientes():
    try:
        return pd.read_excel("Planilha_Mestre_Internacoes_Atualizada.xlsx")
    except:
        return pd.DataFrame(columns=colunas)

def carregar_dados_medicos():
    try:
        return pd.read_excel("Cadastro_Medicos.xlsx")
    except:
        return pd.DataFrame(columns=["Nome do M√©dico"])

def salvar_dados_pacientes(df):
    df.to_excel("Planilha_Mestre_Internacoes_Atualizada.xlsx", index=False)

def carregar_dados_altas():
    try:
        return pd.read_excel("Pacientes_Altas_Atualizada.xlsx")
    except:
        return pd.DataFrame(columns=colunas)

def salvar_dados_altas(df):
    df.to_excel("Pacientes_Altas_Atualizada.xlsx", index=False)

def carregar_dados_obitos():
    try:
        return pd.read_excel("Pacientes_Obitos_Atualizada.xlsx")
    except:
        return pd.DataFrame(columns=colunas)

def salvar_dados_obitos(df):
    df.to_excel("Pacientes_Obitos_Atualizada.xlsx", index=False)

colunas = [
    "Data de Atualiza√ß√£o", "Risco Assistencial", "N√∫mero do Atendimento", "Nome do Paciente",
    "N√∫mero do Leito", "Unidade", "Andar", "Equipe", "Nome do M√©dico Respons√°vel",
    "Cuidado Paliativo", "Pend√™ncia do Turno", "Aguarda Desospitaliza√ß√£o", "Aguarda Cirurgia",
    "Operadora de Sa√∫de", "Origem do Paciente", "Intercorr√™ncia", "Descri√ß√£o da Intercorr√™ncia",
    "Data/Hora da Intercorr√™ncia", "Alta Prevista para Amanh√£", "Foi Alta", "Setor Atual", "Observa√ß√µes"
]

# Carregamento inicial
df_pacientes = carregar_dados_pacientes()
df_medicos = carregar_dados_medicos()
df_altas = carregar_dados_altas()
df_obitos = carregar_dados_obitos()

st.sidebar.title("Menu")
menu = st.sidebar.radio("Navega√ß√£o", ["Painel de Interna√ß√µes", "Cadastro de Paciente", "Cadastro de M√©dico"])

if st.sidebar.button("üîÑ Atualizar Lista"):
    st.experimental_rerun()

# Painel
if menu == "Painel de Interna√ß√µes":
    st.title("Painel de Interna√ß√µes")

    with st.sidebar.expander("üìã Filtros"):
        medico = st.selectbox("M√©dico Respons√°vel", ["Todos"] + sorted(df_medicos["Nome do M√©dico"].dropna().unique().tolist()))
        equipe = st.selectbox("Equipe", ["Todos"] + sorted(df_pacientes["Equipe"].dropna().unique().tolist()))
        unidade = st.selectbox("Unidade", ["Todos"] + sorted(df_pacientes["Unidade"].dropna().unique().tolist()))
        andar = st.selectbox("Andar", ["Todos"] + sorted(df_pacientes["Andar"].dropna().unique().tolist()))
        risco = st.selectbox("Risco Assistencial", ["Todos", "Baixo", "Moderado", "Alto"])
        paliativo = st.selectbox("Cuidado Paliativo", ["Todos", "Sim", "N√£o"])
        setor = st.selectbox("Setor Atual", ["Todos"] + sorted(df_pacientes["Setor Atual"].dropna().unique().tolist()))
        interc = st.selectbox("Com Intercorr√™ncia", ["Todos", "Sim"])
        alta_prevista = st.selectbox("Alta Amanh√£", ["Todos", "Sim", "N√£o"])

    if st.sidebar.button("üßπ Limpar Filtros"):
        st.experimental_rerun()

    if st.sidebar.button("üåô Modo Plant√£o"):
        agora = datetime.now()
        ontem = agora - timedelta(hours=24)
        df_pacientes = df_pacientes[
            pd.to_datetime(df_pacientes["Data/Hora da Intercorr√™ncia"], errors='coerce') >= ontem
        ]

    # Aplica√ß√£o dos filtros
    if medico != "Todos":
        df_pacientes = df_pacientes[df_pacientes["Nome do M√©dico Respons√°vel"] == medico]
    if equipe != "Todos":
        df_pacientes = df_pacientes[df_pacientes["Equipe"] == equipe]
    if unidade != "Todos":
        df_pacientes = df_pacientes[df_pacientes["Unidade"] == unidade]
    if andar != "Todos":
        df_pacientes = df_pacientes[df_pacientes["Andar"] == andar]
    if risco != "Todos":
        df_pacientes = df_pacientes[df_pacientes["Risco Assistencial"] == risco]
    if paliativo != "Todos":
        df_pacientes = df_pacientes[df_pacientes["Cuidado Paliativo"] == paliativo]
    if setor != "Todos":
        df_pacientes = df_pacientes[df_pacientes["Setor Atual"] == setor]
    else:
        df_pacientes = df_pacientes[df_pacientes["Setor Atual"] != "CTI"]
    if interc == "Sim":
        df_pacientes = df_pacientes[df_pacientes["Intercorr√™ncia"] != ""]
    if alta_prevista != "Todos":
        df_pacientes = df_pacientes[df_pacientes["Alta Prevista para Amanh√£"] == alta_prevista]

    for i, row in df_pacientes.iterrows():
        if st.button(f"Editar Leito {row['N√∫mero do Leito']} - {row['Nome do Paciente']} - Dr. {row['Nome do M√©dico Respons√°vel']}", key=i):
            st.session_state['paciente_editando'] = i

    if 'paciente_editando' in st.session_state:
        i = st.session_state['paciente_editando']
        with st.form("form_edit"):
            for col in colunas:
                if col == "N√∫mero do Atendimento":
                    st.text_input(col, value=df_pacientes.at[i, col], disabled=True)
                elif col in ["Data de Atualiza√ß√£o", "Data/Hora da Intercorr√™ncia", "Foi Alta"]:
                    continue
                else:
                    df_pacientes.at[i, col] = st.text_input(col, value=df_pacientes.at[i, col])
            salvar = st.form_submit_button("Salvar")
            if salvar:
                df_pacientes.at[i, "Data de Atualiza√ß√£o"] = datetime.now().date()
                if df_pacientes.at[i, "Intercorr√™ncia"] and not df_pacientes.at[i, "Data/Hora da Intercorr√™ncia"]:
                    df_pacientes.at[i, "Data/Hora da Intercorr√™ncia"] = datetime.now().strftime("%d/%m/%Y %H:%M")
                salvar_dados_pacientes(df_pacientes)
                st.success("Altera√ß√µes salvas.")
                st.experimental_rerun()

        if st.button("Transferir para CTI"):
            df_pacientes.at[i, "Setor Atual"] = "CTI"
            salvar_dados_pacientes(df_pacientes)
            st.success("Transferido para CTI.")
            st.experimental_rerun()

        if st.button("Dar Alta"):
            df_pacientes.at[i, "Foi Alta"] = "Sim"
            df_altas = pd.concat([df_altas, pd.DataFrame([df_pacientes.loc[i]])], ignore_index=True)
            salvar_dados_altas(df_altas)
            df_pacientes.drop(i, inplace=True)
            salvar_dados_pacientes(df_pacientes)
            st.success("Alta registrada.")
            st.experimental_rerun()

        if st.button("Registrar √ìbito"):
            df_obitos = pd.concat([df_obitos, pd.DataFrame([df_pacientes.loc[i]])], ignore_index=True)
            salvar_dados_obitos(df_obitos)
            df_pacientes.drop(i, inplace=True)
            salvar_dados_pacientes(df_pacientes)
            st.success("√ìbito registrado.")
            st.experimental_rerun()
